{
    "contents" : "# Rena Jing and Kevin Dang Nguyen\n# ECS 132 - Project 3\n\n#install.packages('stringr')\n# Load in the required libraries\nlibrary(stringr)\n# connect to the file\nconnecter <- file(\"1milliondigitsofpi.txt\", \"r\", blocking = FALSE)\n# read the data\nz <- scan(connecter, what=\"character\", skip=0)\nclose(connecter)\n\n# join all digits\n# number of pi digits considered\npidigits <- 200000\ny <- \"\"\nj <- 2\nwhile (str_length(y) <= pidigits) {\n  y <- str_c(y, z[j])\n  j <- j + 1\n}\nn <- str_length(y);\nprint(n)\n\n##########################################################################################\narray = as.numeric(strsplit(as.character(y), \"\")[[1]])\n\n##########################################################################################\ncount <- function(digit, length){\n  \n  counter = 0\n  \n  for (i in 1:length){\n    if (array[i] == digit){\n      counter = counter + 1\n    }\n  }\n  return(counter)\n}\n\n##########################################################################################\n#distance <- function(digit, length){\n#  \n#  array_Locations = NULL\n#  array_Distances = NULL\n\n#  location = 0\n\n#  for (i in 1:length){\n#    if (array[i] == digit){\n#      location = i\n#      array_Locations = c(array_Locations, location) \n#    }      \n#  }\n#  for (i in 1:length(array_Locations)){\n#    distance = array_Locations[i+1] - array_Locations[i] - 1\n#    array_Distances =  c(array_Distances, distance)\n#  }\n#  return(array_Distances)\n#}\n##########################################################################################\ndistance <- function(digit, length){\n  \n  array_Distances = NULL\n  distance = 0\n  counter = 0\n  \n  for (i in 1:length){\n    if(array[i] == digit && counter == 0){\n      counter = 1\n    }\n    \n    else if (array[i] == digit && counter != 0){  \n      array_Distances = c(array_Distances, distance) \n      distance = 0\n      counter = counter + 1 \n    }#if\n    else{\n      distance = distance + 1\n    }\n  }#for searching through entire array\n  \n  return(array_Distances)\n}\n\n##########################################################################################\n# Step 1.1\ndistArray = NULL\ndistArray = distance(1,200000)\nplot(distArray, xlab = \"Number of Occurances\", ylab = \"Distances\", main = \"3.1.1 Scatterplot of Distances\")\n\n###########\n# Step 1.2\nboxplot(distArray, ylab = \"Distances\", main = \"3.1.2 Box and Whisker Plot of Distances\")\n\n###########\n# Step 1.3\nquantile(distArray, 0.25)\nquantile(distArray, 0.50)\nquantile(distArray, 0.75)\n\n###########\n# Step 1.4\nmean(distArray)\nmedian(distArray)\nvar(distArray)\n\n##########################################################################################\n\n# Step 2.1\nsampleMean <- function(sampleSize, numExperiements){\n  distArray2 = distArray\n  sampleMean = NULL\n  for (i in 1:numExperiements){\n    x = sample(distArray2, sampleSize, replace = FALSE)\n    x = mean(x)\n    sampleMean = c(sampleMean, x)\n  }\n  plot(sampleMean, xlab = \"Number of Experiments\", ylab = \"Distances\", main = \"3.2.1/2 Sample Mean of Distances\")\n  return(sampleMean)\n}\n\nsampleMean(10, 100)\nmean(sampleMean(10, 100))\n\n###########\n# Step 2.2\nsampleMean(20, 100)\n#mean(sampleMean(20, 100))\nsampleMean(30, 100)\n#mean(sampleMean(30, 100))\nsampleMean(40, 100)\n#mean(sampleMean(40, 100))\n\n###########\n# Step 2.3\nsampleVariance <- function(sampleSize, numExperiements){\n  distArray2 = distArray\n  sampleVar = NULL\n  for (i in 1:numExperiements){\n    x = sample(distArray2, sampleSize, replace = FALSE)\n    x = var(x)\n    sampleVar = c(sampleVar, x)\n  }\n  plot(sampleVar, xlab = \"Number of Experiments\", ylab = \"Distances\", main = \"3.2.3 Sample Variance of Distances\")\n  return(sampleVar)\n}\n\nsampleVariance(10, 100)\n#mean(sampleVariance(10, 100))\nsampleVariance(20, 100)\n#mean(sampleVariance(20, 100))\nsampleVariance(30, 100)\n#mean(sampleVariance(30, 100))\nsampleVariance(40, 100)\n#mean(sampleVariance(40, 100))\n\n###########\n# Step 2.4\nmean(distArray)\nvar(distArray)\n# In statistics, the larger the sample sizes, the more it accurately reflects the \n# population mean and variance compared to the sample mean and sample variance.\n\n##########################################################################################\n\n# Step 3.1\nrand_norm <- rnorm(100, mean(distArray), sd(distArray))\nrand_norm\nqqplot(sampleMean(10, 100), rand_norm)s\n\n###########\n# Step 3.2\nqqplot(sampleMean(30,100), rand_norm)\nqqplot(sampleMean(50,100), rand_norm)\n\n###########\n# Step 3.3\n\n\n##########################################################################################\n# Step 4.1\npopSD = sd(distArray)\n  # 95% confidence interval\nsampleSize_95 = (1.96 * popSD / 0.01)^2\nsampleSize_95 #3474958\n  # 99% confidence interval\nsampleSize_99 = (2.576 * popSD / 0.01)^2\nsampleSize_99 #6002459\n\n###########\n# Step 4.2\nsampleSD <- function(sampleSize, numExperiements){\n  distArray2 = distArray\n  sampleSD = NULL\n  for (i in 1:numExperiements){\n    x = sample(distArray2, sampleSize, replace = FALSE)\n    x = mean(x)\n    sampleSD = c(sampleSD, x)\n  }\n  return(sampleSD)\n}\nsampSD = mean(sampleSD(10,100))\n\nsampleSize_sampleSD_95 = (1.96 * sampSD / 0.01)^2\nsampleSize_sampleSD_95\nsampleSize_sampleSD_99 = (2.576 * sampSD / 0.01)^2\nsampleSize_sampleSD_99\n\n###########\n# Step 4.3\n# Finding the sample size with the respected confidence intervals using the population \n# standard deviation is more accurate than using the sample standard deviations. Our \n# sample sizes are much larger using the population standard deviation compared to using\n# the sample standard deviations which lowers are sample sizes.\n\n##########################################################################################\n# Step 5.1\n\npopMean <- function(digit){\n  \n  count = count(digit,200000)\n  mean = count/200000\n  return(mean)\n}\n\n\npopDigitMean = NULL\n\nfor(i in 0:9){\n  mean = popMean(i)\n  popDigitMean <- c(popDigitMean, mean)\n  \n}\n\n\narray2 = array \nrandomSample2 = sample(array2, size = 30, replace = FALSE, prob = NULL)\n\n\ncountSample <- function(digit, length){\n  \n  counter = 0\n  \n  for (i in 1:length){\n    if (randomSample2[i] == digit){\n      counter = counter + 1\n    }\n  }\n  return(counter)\n}\n\n\nmeanSampleDistances <- function(digit){\n  count = countSample(digit,30)\n  mean = count/30\n  return(mean)\n  \n}\n\nsampleDigitMean = NULL\n\n\nfor(i in 0:9){\n  mean = meanSampleDistances(i)\n  sampleDigitMean <- c(sampleDigitMean, mean)\n}\n\nfit = lm(formula = sampleDigitMean ~ popDigitMean, data = galton)\nfit\nsummary(fit)\ncor(sampleDigitMean, popDigitMean)\nplot(fit)\n\n\n\n##########################################################################################\n# Step 6.1\nsampleMean100 = mean(sampleMean(100,100))\nsampleMean100\nrand_poisson100 = rpois(100, sampleMean100)\nrand_poisson100\n\n###########\n# Step 6.2\nnumOfNines = 0\nfor (i in 1:(length(rand_poisson100))){\n  if (rand_poisson100[i] == 9)\n    numOfNines = numOfNines + 1\n}\nnumOfNines\n\n###########\n# Step 6.3\nhist(rand_poisson100, xlab = \"Index\", ylab = \"Distance\", main = \"Histogram of Poisson Distribution of Distance\")\nhist(rand_norm, xlab = \"Index\", ylab = \"Distance\", main = \"Histogram of Normal Distribution of Distance\")\nhist(sampleMean(10, 100))\n\n###########\n# Step 6.4\nqqplot(rand_poisson100, rand_norm)\nqqplot(rand_poisson100, sampleMean(10,100))\n\n###########\n# Step 6.5\n# The Poisson distribution can be considered approximately Normal by the Central Limit Theorem if the sample size\n# is big enough. Hence, the CLT states that the distribution of the sample average for any process is normally \n# distributed as shown in the qqplots where they look almost identical in the case with the Poisson random variable\n# compared with the Normal and sample means.\n\n\n\n\n\n",
    "created" : 1417599778423.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2095167413",
    "id" : "1F4E7DA9",
    "lastKnownWriteTime" : 1418034354,
    "path" : "C:/Users/Kevin Dang Nguyen/Desktop/ECS 132 - Project 3/Project3.R",
    "project_path" : "Project3.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}